// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package alpaca

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	decimal "github.com/shopspring/decimal"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(in *jlexer.Lexer, out *Watchlist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_id":
			out.AccountID = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "assets":
			if in.IsNull() {
				in.Skip()
				out.Assets = nil
			} else {
				in.Delim('[')
				if out.Assets == nil {
					if !in.IsDelim(']') {
						out.Assets = make([]Asset, 0, 0)
					} else {
						out.Assets = []Asset{}
					}
				} else {
					out.Assets = (out.Assets)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Asset
					(v1).UnmarshalEasyJSON(in)
					out.Assets = append(out.Assets, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(out *jwriter.Writer, in Watchlist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"assets\":"
		out.RawString(prefix)
		if in.Assets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Assets {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Watchlist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Watchlist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Watchlist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Watchlist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(in *jlexer.Lexer, out *UpdateWatchlistRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "symbols":
			if in.IsNull() {
				in.Skip()
				out.Symbols = nil
			} else {
				in.Delim('[')
				if out.Symbols == nil {
					if !in.IsDelim(']') {
						out.Symbols = make([]string, 0, 4)
					} else {
						out.Symbols = []string{}
					}
				} else {
					out.Symbols = (out.Symbols)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Symbols = append(out.Symbols, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(out *jwriter.Writer, in UpdateWatchlistRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"symbols\":"
		out.RawString(prefix)
		if in.Symbols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Symbols {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateWatchlistRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateWatchlistRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateWatchlistRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateWatchlistRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(in *jlexer.Lexer, out *TradeUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			out.Event = string(in.String())
		case "execution_id":
			out.ExecutionID = string(in.String())
		case "order":
			(out.Order).UnmarshalEasyJSON(in)
		case "position_qty":
			if in.IsNull() {
				in.Skip()
				out.PositionQty = nil
			} else {
				if out.PositionQty == nil {
					out.PositionQty = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PositionQty).UnmarshalJSON(data))
				}
			}
		case "price":
			if in.IsNull() {
				in.Skip()
				out.Price = nil
			} else {
				if out.Price == nil {
					out.Price = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Price).UnmarshalJSON(data))
				}
			}
		case "qty":
			if in.IsNull() {
				in.Skip()
				out.Qty = nil
			} else {
				if out.Qty == nil {
					out.Qty = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Qty).UnmarshalJSON(data))
				}
			}
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				if out.Timestamp == nil {
					out.Timestamp = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Timestamp).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(out *jwriter.Writer, in TradeUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		out.String(string(in.Event))
	}
	{
		const prefix string = ",\"execution_id\":"
		out.RawString(prefix)
		out.String(string(in.ExecutionID))
	}
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix)
		(in.Order).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"position_qty\":"
		out.RawString(prefix)
		if in.PositionQty == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PositionQty).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		if in.Price == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Price).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		if in.Qty == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Qty).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		if in.Timestamp == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Timestamp).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca3(in *jlexer.Lexer, out *RemoveSymbolFromWatchlistRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca3(out *jwriter.Writer, in RemoveSymbolFromWatchlistRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoveSymbolFromWatchlistRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoveSymbolFromWatchlistRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoveSymbolFromWatchlistRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoveSymbolFromWatchlistRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca3(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca4(in *jlexer.Lexer, out *Position) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asset_id":
			out.AssetID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "exchange":
			out.Exchange = string(in.String())
		case "asset_class":
			out.Class = string(in.String())
		case "account_id":
			out.AccountID = string(in.String())
		case "avg_entry_price":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EntryPrice).UnmarshalJSON(data))
			}
		case "qty":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Qty).UnmarshalJSON(data))
			}
		case "side":
			out.Side = string(in.String())
		case "market_value":
			if in.IsNull() {
				in.Skip()
				out.MarketValue = nil
			} else {
				if out.MarketValue == nil {
					out.MarketValue = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MarketValue).UnmarshalJSON(data))
				}
			}
		case "cost_basis":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CostBasis).UnmarshalJSON(data))
			}
		case "unrealized_pl":
			if in.IsNull() {
				in.Skip()
				out.UnrealizedPL = nil
			} else {
				if out.UnrealizedPL == nil {
					out.UnrealizedPL = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UnrealizedPL).UnmarshalJSON(data))
				}
			}
		case "unrealized_plpc":
			if in.IsNull() {
				in.Skip()
				out.UnrealizedPLPC = nil
			} else {
				if out.UnrealizedPLPC == nil {
					out.UnrealizedPLPC = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.UnrealizedPLPC).UnmarshalJSON(data))
				}
			}
		case "current_price":
			if in.IsNull() {
				in.Skip()
				out.CurrentPrice = nil
			} else {
				if out.CurrentPrice == nil {
					out.CurrentPrice = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CurrentPrice).UnmarshalJSON(data))
				}
			}
		case "lastday_price":
			if in.IsNull() {
				in.Skip()
				out.LastdayPrice = nil
			} else {
				if out.LastdayPrice == nil {
					out.LastdayPrice = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastdayPrice).UnmarshalJSON(data))
				}
			}
		case "change_today":
			if in.IsNull() {
				in.Skip()
				out.ChangeToday = nil
			} else {
				if out.ChangeToday == nil {
					out.ChangeToday = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ChangeToday).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca4(out *jwriter.Writer, in Position) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"asset_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AssetID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"exchange\":"
		out.RawString(prefix)
		out.String(string(in.Exchange))
	}
	{
		const prefix string = ",\"asset_class\":"
		out.RawString(prefix)
		out.String(string(in.Class))
	}
	{
		const prefix string = ",\"account_id\":"
		out.RawString(prefix)
		out.String(string(in.AccountID))
	}
	{
		const prefix string = ",\"avg_entry_price\":"
		out.RawString(prefix)
		out.Raw((in.EntryPrice).MarshalJSON())
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.Raw((in.Qty).MarshalJSON())
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"market_value\":"
		out.RawString(prefix)
		if in.MarketValue == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.MarketValue).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"cost_basis\":"
		out.RawString(prefix)
		out.Raw((in.CostBasis).MarshalJSON())
	}
	{
		const prefix string = ",\"unrealized_pl\":"
		out.RawString(prefix)
		if in.UnrealizedPL == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UnrealizedPL).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"unrealized_plpc\":"
		out.RawString(prefix)
		if in.UnrealizedPLPC == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.UnrealizedPLPC).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"current_price\":"
		out.RawString(prefix)
		if in.CurrentPrice == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CurrentPrice).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"lastday_price\":"
		out.RawString(prefix)
		if in.LastdayPrice == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LastdayPrice).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"change_today\":"
		out.RawString(prefix)
		if in.ChangeToday == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ChangeToday).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Position) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Position) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Position) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Position) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca4(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca5(in *jlexer.Lexer, out *PortfolioHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "base_value":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BaseValue).UnmarshalJSON(data))
			}
		case "equity":
			if in.IsNull() {
				in.Skip()
				out.Equity = nil
			} else {
				in.Delim('[')
				if out.Equity == nil {
					if !in.IsDelim(']') {
						out.Equity = make([]decimal.Decimal, 0, 4)
					} else {
						out.Equity = []decimal.Decimal{}
					}
				} else {
					out.Equity = (out.Equity)[:0]
				}
				for !in.IsDelim(']') {
					var v7 decimal.Decimal
					if data := in.Raw(); in.Ok() {
						in.AddError((v7).UnmarshalJSON(data))
					}
					out.Equity = append(out.Equity, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "profit_loss":
			if in.IsNull() {
				in.Skip()
				out.ProfitLoss = nil
			} else {
				in.Delim('[')
				if out.ProfitLoss == nil {
					if !in.IsDelim(']') {
						out.ProfitLoss = make([]decimal.Decimal, 0, 4)
					} else {
						out.ProfitLoss = []decimal.Decimal{}
					}
				} else {
					out.ProfitLoss = (out.ProfitLoss)[:0]
				}
				for !in.IsDelim(']') {
					var v8 decimal.Decimal
					if data := in.Raw(); in.Ok() {
						in.AddError((v8).UnmarshalJSON(data))
					}
					out.ProfitLoss = append(out.ProfitLoss, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "profit_loss_pct":
			if in.IsNull() {
				in.Skip()
				out.ProfitLossPct = nil
			} else {
				in.Delim('[')
				if out.ProfitLossPct == nil {
					if !in.IsDelim(']') {
						out.ProfitLossPct = make([]decimal.Decimal, 0, 4)
					} else {
						out.ProfitLossPct = []decimal.Decimal{}
					}
				} else {
					out.ProfitLossPct = (out.ProfitLossPct)[:0]
				}
				for !in.IsDelim(']') {
					var v9 decimal.Decimal
					if data := in.Raw(); in.Ok() {
						in.AddError((v9).UnmarshalJSON(data))
					}
					out.ProfitLossPct = append(out.ProfitLossPct, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "timeframe":
			out.Timeframe = TimeFrame(in.String())
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				in.Delim('[')
				if out.Timestamp == nil {
					if !in.IsDelim(']') {
						out.Timestamp = make([]int64, 0, 8)
					} else {
						out.Timestamp = []int64{}
					}
				} else {
					out.Timestamp = (out.Timestamp)[:0]
				}
				for !in.IsDelim(']') {
					var v10 int64
					v10 = int64(in.Int64())
					out.Timestamp = append(out.Timestamp, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca5(out *jwriter.Writer, in PortfolioHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"base_value\":"
		out.RawString(prefix[1:])
		out.Raw((in.BaseValue).MarshalJSON())
	}
	{
		const prefix string = ",\"equity\":"
		out.RawString(prefix)
		if in.Equity == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Equity {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Raw((v12).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"profit_loss\":"
		out.RawString(prefix)
		if in.ProfitLoss == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.ProfitLoss {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.Raw((v14).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"profit_loss_pct\":"
		out.RawString(prefix)
		if in.ProfitLossPct == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.ProfitLossPct {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Raw((v16).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"timeframe\":"
		out.RawString(prefix)
		out.String(string(in.Timeframe))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		if in.Timestamp == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Timestamp {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PortfolioHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PortfolioHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PortfolioHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PortfolioHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca5(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca6(in *jlexer.Lexer, out *OrderAttributes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "take_profit_limit_price":
			if in.IsNull() {
				in.Skip()
				out.TakeProfitLimitPrice = nil
			} else {
				if out.TakeProfitLimitPrice == nil {
					out.TakeProfitLimitPrice = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TakeProfitLimitPrice).UnmarshalJSON(data))
				}
			}
		case "stop_loss_stop_price":
			if in.IsNull() {
				in.Skip()
				out.StopLossStopPrice = nil
			} else {
				if out.StopLossStopPrice == nil {
					out.StopLossStopPrice = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.StopLossStopPrice).UnmarshalJSON(data))
				}
			}
		case "stop_loss_limit_price":
			if in.IsNull() {
				in.Skip()
				out.StopLossLimitPrice = nil
			} else {
				if out.StopLossLimitPrice == nil {
					out.StopLossLimitPrice = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.StopLossLimitPrice).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca6(out *jwriter.Writer, in OrderAttributes) {
	out.RawByte('{')
	first := true
	_ = first
	if in.TakeProfitLimitPrice != nil {
		const prefix string = ",\"take_profit_limit_price\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.TakeProfitLimitPrice).MarshalJSON())
	}
	if in.StopLossStopPrice != nil {
		const prefix string = ",\"stop_loss_stop_price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.StopLossStopPrice).MarshalJSON())
	}
	if in.StopLossLimitPrice != nil {
		const prefix string = ",\"stop_loss_limit_price\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.StopLossLimitPrice).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderAttributes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderAttributes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderAttributes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderAttributes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca6(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca7(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "client_order_id":
			out.ClientOrderID = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "submitted_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.SubmittedAt).UnmarshalJSON(data))
			}
		case "filled_at":
			if in.IsNull() {
				in.Skip()
				out.FilledAt = nil
			} else {
				if out.FilledAt == nil {
					out.FilledAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FilledAt).UnmarshalJSON(data))
				}
			}
		case "expired_at":
			if in.IsNull() {
				in.Skip()
				out.ExpiredAt = nil
			} else {
				if out.ExpiredAt == nil {
					out.ExpiredAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ExpiredAt).UnmarshalJSON(data))
				}
			}
		case "canceled_at":
			if in.IsNull() {
				in.Skip()
				out.CanceledAt = nil
			} else {
				if out.CanceledAt == nil {
					out.CanceledAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CanceledAt).UnmarshalJSON(data))
				}
			}
		case "failed_at":
			if in.IsNull() {
				in.Skip()
				out.FailedAt = nil
			} else {
				if out.FailedAt == nil {
					out.FailedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FailedAt).UnmarshalJSON(data))
				}
			}
		case "replaced_at":
			if in.IsNull() {
				in.Skip()
				out.ReplacedAt = nil
			} else {
				if out.ReplacedAt == nil {
					out.ReplacedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplacedAt).UnmarshalJSON(data))
				}
			}
		case "replaces":
			if in.IsNull() {
				in.Skip()
				out.Replaces = nil
			} else {
				if out.Replaces == nil {
					out.Replaces = new(string)
				}
				*out.Replaces = string(in.String())
			}
		case "replaced_by":
			if in.IsNull() {
				in.Skip()
				out.ReplacedBy = nil
			} else {
				if out.ReplacedBy == nil {
					out.ReplacedBy = new(string)
				}
				*out.ReplacedBy = string(in.String())
			}
		case "asset_id":
			out.AssetID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "asset_class":
			out.Class = string(in.String())
		case "order_class":
			out.OrderClass = OrderClass(in.String())
		case "qty":
			if in.IsNull() {
				in.Skip()
				out.Qty = nil
			} else {
				if out.Qty == nil {
					out.Qty = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Qty).UnmarshalJSON(data))
				}
			}
		case "notional":
			if in.IsNull() {
				in.Skip()
				out.Notional = nil
			} else {
				if out.Notional == nil {
					out.Notional = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Notional).UnmarshalJSON(data))
				}
			}
		case "filled_qty":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FilledQty).UnmarshalJSON(data))
			}
		case "type":
			out.Type = OrderType(in.String())
		case "side":
			out.Side = Side(in.String())
		case "time_in_force":
			out.TimeInForce = TimeInForce(in.String())
		case "limit_price":
			if in.IsNull() {
				in.Skip()
				out.LimitPrice = nil
			} else {
				if out.LimitPrice == nil {
					out.LimitPrice = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LimitPrice).UnmarshalJSON(data))
				}
			}
		case "filled_avg_price":
			if in.IsNull() {
				in.Skip()
				out.FilledAvgPrice = nil
			} else {
				if out.FilledAvgPrice == nil {
					out.FilledAvgPrice = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FilledAvgPrice).UnmarshalJSON(data))
				}
			}
		case "stop_price":
			if in.IsNull() {
				in.Skip()
				out.StopPrice = nil
			} else {
				if out.StopPrice == nil {
					out.StopPrice = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.StopPrice).UnmarshalJSON(data))
				}
			}
		case "trail_price":
			if in.IsNull() {
				in.Skip()
				out.TrailPrice = nil
			} else {
				if out.TrailPrice == nil {
					out.TrailPrice = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TrailPrice).UnmarshalJSON(data))
				}
			}
		case "trail_percent":
			if in.IsNull() {
				in.Skip()
				out.TrailPercent = nil
			} else {
				if out.TrailPercent == nil {
					out.TrailPercent = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TrailPercent).UnmarshalJSON(data))
				}
			}
		case "hwm":
			if in.IsNull() {
				in.Skip()
				out.Hwm = nil
			} else {
				if out.Hwm == nil {
					out.Hwm = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Hwm).UnmarshalJSON(data))
				}
			}
		case "status":
			out.Status = string(in.String())
		case "extended_hours":
			out.ExtendedHours = bool(in.Bool())
		case "legs":
			if in.IsNull() {
				in.Skip()
				out.Legs = nil
			} else {
				if out.Legs == nil {
					out.Legs = new([]Order)
				}
				if in.IsNull() {
					in.Skip()
					*out.Legs = nil
				} else {
					in.Delim('[')
					if *out.Legs == nil {
						if !in.IsDelim(']') {
							*out.Legs = make([]Order, 0, 0)
						} else {
							*out.Legs = []Order{}
						}
					} else {
						*out.Legs = (*out.Legs)[:0]
					}
					for !in.IsDelim(']') {
						var v19 Order
						(v19).UnmarshalEasyJSON(in)
						*out.Legs = append(*out.Legs, v19)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca7(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"client_order_id\":"
		out.RawString(prefix)
		out.String(string(in.ClientOrderID))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"submitted_at\":"
		out.RawString(prefix)
		out.Raw((in.SubmittedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"filled_at\":"
		out.RawString(prefix)
		if in.FilledAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.FilledAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"expired_at\":"
		out.RawString(prefix)
		if in.ExpiredAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ExpiredAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"canceled_at\":"
		out.RawString(prefix)
		if in.CanceledAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CanceledAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"failed_at\":"
		out.RawString(prefix)
		if in.FailedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.FailedAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"replaced_at\":"
		out.RawString(prefix)
		if in.ReplacedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplacedAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"replaces\":"
		out.RawString(prefix)
		if in.Replaces == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Replaces))
		}
	}
	{
		const prefix string = ",\"replaced_by\":"
		out.RawString(prefix)
		if in.ReplacedBy == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ReplacedBy))
		}
	}
	{
		const prefix string = ",\"asset_id\":"
		out.RawString(prefix)
		out.String(string(in.AssetID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"asset_class\":"
		out.RawString(prefix)
		out.String(string(in.Class))
	}
	{
		const prefix string = ",\"order_class\":"
		out.RawString(prefix)
		out.String(string(in.OrderClass))
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		if in.Qty == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Qty).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"notional\":"
		out.RawString(prefix)
		if in.Notional == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Notional).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"filled_qty\":"
		out.RawString(prefix)
		out.Raw((in.FilledQty).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"time_in_force\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"limit_price\":"
		out.RawString(prefix)
		if in.LimitPrice == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LimitPrice).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"filled_avg_price\":"
		out.RawString(prefix)
		if in.FilledAvgPrice == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.FilledAvgPrice).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"stop_price\":"
		out.RawString(prefix)
		if in.StopPrice == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.StopPrice).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"trail_price\":"
		out.RawString(prefix)
		if in.TrailPrice == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TrailPrice).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"trail_percent\":"
		out.RawString(prefix)
		if in.TrailPercent == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TrailPercent).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"hwm\":"
		out.RawString(prefix)
		if in.Hwm == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Hwm).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"extended_hours\":"
		out.RawString(prefix)
		out.Bool(bool(in.ExtendedHours))
	}
	{
		const prefix string = ",\"legs\":"
		out.RawString(prefix)
		if in.Legs == nil {
			out.RawString("null")
		} else {
			if *in.Legs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v20, v21 := range *in.Legs {
					if v20 > 0 {
						out.RawByte(',')
					}
					(v21).MarshalEasyJSON(out)
				}
				out.RawByte(']')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Order) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Order) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Order) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Order) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca7(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca8(in *jlexer.Lexer, out *Fundamental) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "asset_id":
			out.AssetID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "full_name":
			out.FullName = string(in.String())
		case "industry_name":
			out.IndustryName = string(in.String())
		case "industry_group":
			out.IndustryGroup = string(in.String())
		case "sector":
			out.Sector = string(in.String())
		case "pe_ratio":
			out.PERatio = float32(in.Float32())
		case "peg_ratio":
			out.PEGRatio = float32(in.Float32())
		case "beta":
			out.Beta = float32(in.Float32())
		case "eps":
			out.EPS = float32(in.Float32())
		case "market_cap":
			out.MarketCap = int64(in.Int64())
		case "shares_outstanding":
			out.SharesOutstanding = int64(in.Int64())
		case "avg_vol":
			out.AvgVol = int64(in.Int64())
		case "div_rate":
			out.DivRate = float32(in.Float32())
		case "roe":
			out.ROE = float32(in.Float32())
		case "roa":
			out.ROA = float32(in.Float32())
		case "ps":
			out.PS = float32(in.Float32())
		case "pc":
			out.PC = float32(in.Float32())
		case "gross_margin":
			out.GrossMargin = float32(in.Float32())
		case "fifty_two_week_high":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FiftyTwoWeekHigh).UnmarshalJSON(data))
			}
		case "fifty_two_week_low":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FiftyTwoWeekLow).UnmarshalJSON(data))
			}
		case "short_description":
			out.ShortDescription = string(in.String())
		case "long_description":
			out.LongDescription = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca8(out *jwriter.Writer, in Fundamental) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"asset_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.AssetID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	{
		const prefix string = ",\"industry_name\":"
		out.RawString(prefix)
		out.String(string(in.IndustryName))
	}
	{
		const prefix string = ",\"industry_group\":"
		out.RawString(prefix)
		out.String(string(in.IndustryGroup))
	}
	{
		const prefix string = ",\"sector\":"
		out.RawString(prefix)
		out.String(string(in.Sector))
	}
	{
		const prefix string = ",\"pe_ratio\":"
		out.RawString(prefix)
		out.Float32(float32(in.PERatio))
	}
	{
		const prefix string = ",\"peg_ratio\":"
		out.RawString(prefix)
		out.Float32(float32(in.PEGRatio))
	}
	{
		const prefix string = ",\"beta\":"
		out.RawString(prefix)
		out.Float32(float32(in.Beta))
	}
	{
		const prefix string = ",\"eps\":"
		out.RawString(prefix)
		out.Float32(float32(in.EPS))
	}
	{
		const prefix string = ",\"market_cap\":"
		out.RawString(prefix)
		out.Int64(int64(in.MarketCap))
	}
	{
		const prefix string = ",\"shares_outstanding\":"
		out.RawString(prefix)
		out.Int64(int64(in.SharesOutstanding))
	}
	{
		const prefix string = ",\"avg_vol\":"
		out.RawString(prefix)
		out.Int64(int64(in.AvgVol))
	}
	{
		const prefix string = ",\"div_rate\":"
		out.RawString(prefix)
		out.Float32(float32(in.DivRate))
	}
	{
		const prefix string = ",\"roe\":"
		out.RawString(prefix)
		out.Float32(float32(in.ROE))
	}
	{
		const prefix string = ",\"roa\":"
		out.RawString(prefix)
		out.Float32(float32(in.ROA))
	}
	{
		const prefix string = ",\"ps\":"
		out.RawString(prefix)
		out.Float32(float32(in.PS))
	}
	{
		const prefix string = ",\"pc\":"
		out.RawString(prefix)
		out.Float32(float32(in.PC))
	}
	{
		const prefix string = ",\"gross_margin\":"
		out.RawString(prefix)
		out.Float32(float32(in.GrossMargin))
	}
	{
		const prefix string = ",\"fifty_two_week_high\":"
		out.RawString(prefix)
		out.Raw((in.FiftyTwoWeekHigh).MarshalJSON())
	}
	{
		const prefix string = ",\"fifty_two_week_low\":"
		out.RawString(prefix)
		out.Raw((in.FiftyTwoWeekLow).MarshalJSON())
	}
	{
		const prefix string = ",\"short_description\":"
		out.RawString(prefix)
		out.String(string(in.ShortDescription))
	}
	{
		const prefix string = ",\"long_description\":"
		out.RawString(prefix)
		out.String(string(in.LongDescription))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Fundamental) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Fundamental) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Fundamental) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Fundamental) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca8(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca9(in *jlexer.Lexer, out *CreateWatchlistRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "symbols":
			if in.IsNull() {
				in.Skip()
				out.Symbols = nil
			} else {
				in.Delim('[')
				if out.Symbols == nil {
					if !in.IsDelim(']') {
						out.Symbols = make([]string, 0, 4)
					} else {
						out.Symbols = []string{}
					}
				} else {
					out.Symbols = (out.Symbols)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.Symbols = append(out.Symbols, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca9(out *jwriter.Writer, in CreateWatchlistRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"symbols\":"
		out.RawString(prefix)
		if in.Symbols == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Symbols {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateWatchlistRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateWatchlistRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateWatchlistRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateWatchlistRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca9(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca10(in *jlexer.Lexer, out *Clock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "is_open":
			out.IsOpen = bool(in.Bool())
		case "next_open":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.NextOpen).UnmarshalJSON(data))
			}
		case "next_close":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.NextClose).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca10(out *jwriter.Writer, in Clock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"is_open\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsOpen))
	}
	{
		const prefix string = ",\"next_open\":"
		out.RawString(prefix)
		out.Raw((in.NextOpen).MarshalJSON())
	}
	{
		const prefix string = ",\"next_close\":"
		out.RawString(prefix)
		out.Raw((in.NextClose).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Clock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Clock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Clock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Clock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca10(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca11(in *jlexer.Lexer, out *CalendarDay) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "open":
			out.Open = string(in.String())
		case "close":
			out.Close = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca11(out *jwriter.Writer, in CalendarDay) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"open\":"
		out.RawString(prefix)
		out.String(string(in.Open))
	}
	{
		const prefix string = ",\"close\":"
		out.RawString(prefix)
		out.String(string(in.Close))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CalendarDay) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CalendarDay) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CalendarDay) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CalendarDay) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca11(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca12(in *jlexer.Lexer, out *Asset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "exchange":
			out.Exchange = string(in.String())
		case "class":
			out.Class = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "tradable":
			out.Tradable = bool(in.Bool())
		case "marginable":
			out.Marginable = bool(in.Bool())
		case "shortable":
			out.Shortable = bool(in.Bool())
		case "easy_to_borrow":
			out.EasyToBorrow = bool(in.Bool())
		case "fractionable":
			out.Fractionable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca12(out *jwriter.Writer, in Asset) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"exchange\":"
		out.RawString(prefix)
		out.String(string(in.Exchange))
	}
	{
		const prefix string = ",\"class\":"
		out.RawString(prefix)
		out.String(string(in.Class))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"tradable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tradable))
	}
	{
		const prefix string = ",\"marginable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Marginable))
	}
	{
		const prefix string = ",\"shortable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Shortable))
	}
	{
		const prefix string = ",\"easy_to_borrow\":"
		out.RawString(prefix)
		out.Bool(bool(in.EasyToBorrow))
	}
	{
		const prefix string = ",\"fractionable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Fractionable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Asset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Asset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Asset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Asset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca12(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca13(in *jlexer.Lexer, out *Announcement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "corporate_actions_id":
			out.CorporateActionsID = string(in.String())
		case "ca_type":
			out.CAType = string(in.String())
		case "ca_sub_type":
			out.CASubType = string(in.String())
		case "initiating_symbol":
			out.InitiatingSymbol = string(in.String())
		case "initiating_original_cusip":
			out.InitiatingOriginalCusip = string(in.String())
		case "target_symbol":
			out.TargetSymbol = string(in.String())
		case "target_original_cusip":
			out.TargetOriginalCusip = string(in.String())
		case "declaration_date":
			out.DeclarationDate = string(in.String())
		case "expiration_date":
			out.ExpirationDate = string(in.String())
		case "record_date":
			out.RecordDate = string(in.String())
		case "payable_date":
			out.PayableDate = string(in.String())
		case "cash":
			out.Cash = string(in.String())
		case "old_rate":
			out.OldRate = string(in.String())
		case "new_rate":
			out.NewRate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca13(out *jwriter.Writer, in Announcement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"corporate_actions_id\":"
		out.RawString(prefix)
		out.String(string(in.CorporateActionsID))
	}
	{
		const prefix string = ",\"ca_type\":"
		out.RawString(prefix)
		out.String(string(in.CAType))
	}
	{
		const prefix string = ",\"ca_sub_type\":"
		out.RawString(prefix)
		out.String(string(in.CASubType))
	}
	{
		const prefix string = ",\"initiating_symbol\":"
		out.RawString(prefix)
		out.String(string(in.InitiatingSymbol))
	}
	{
		const prefix string = ",\"initiating_original_cusip\":"
		out.RawString(prefix)
		out.String(string(in.InitiatingOriginalCusip))
	}
	{
		const prefix string = ",\"target_symbol\":"
		out.RawString(prefix)
		out.String(string(in.TargetSymbol))
	}
	{
		const prefix string = ",\"target_original_cusip\":"
		out.RawString(prefix)
		out.String(string(in.TargetOriginalCusip))
	}
	{
		const prefix string = ",\"declaration_date\":"
		out.RawString(prefix)
		out.String(string(in.DeclarationDate))
	}
	{
		const prefix string = ",\"expiration_date\":"
		out.RawString(prefix)
		out.String(string(in.ExpirationDate))
	}
	{
		const prefix string = ",\"record_date\":"
		out.RawString(prefix)
		out.String(string(in.RecordDate))
	}
	{
		const prefix string = ",\"payable_date\":"
		out.RawString(prefix)
		out.String(string(in.PayableDate))
	}
	{
		const prefix string = ",\"cash\":"
		out.RawString(prefix)
		out.String(string(in.Cash))
	}
	{
		const prefix string = ",\"old_rate\":"
		out.RawString(prefix)
		out.String(string(in.OldRate))
	}
	{
		const prefix string = ",\"new_rate\":"
		out.RawString(prefix)
		out.String(string(in.NewRate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Announcement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Announcement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Announcement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Announcement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca13(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca14(in *jlexer.Lexer, out *AddSymbolToWatchlistRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca14(out *jwriter.Writer, in AddSymbolToWatchlistRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddSymbolToWatchlistRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddSymbolToWatchlistRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddSymbolToWatchlistRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddSymbolToWatchlistRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca14(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca15(in *jlexer.Lexer, out *AccountConfigurations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dtbp_check":
			out.DtbpCheck = DtbpCheck(in.String())
		case "no_shorting":
			out.NoShorting = bool(in.Bool())
		case "trade_confirm_email":
			out.TradeConfirmEmail = TradeConfirmEmail(in.String())
		case "trade_suspended_by_user":
			out.TradeSuspendedByUser = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca15(out *jwriter.Writer, in AccountConfigurations) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dtbp_check\":"
		out.RawString(prefix[1:])
		out.String(string(in.DtbpCheck))
	}
	{
		const prefix string = ",\"no_shorting\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoShorting))
	}
	{
		const prefix string = ",\"trade_confirm_email\":"
		out.RawString(prefix)
		out.String(string(in.TradeConfirmEmail))
	}
	{
		const prefix string = ",\"trade_suspended_by_user\":"
		out.RawString(prefix)
		out.Bool(bool(in.TradeSuspendedByUser))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountConfigurations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountConfigurations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountConfigurations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountConfigurations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca15(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca16(in *jlexer.Lexer, out *AccountActivity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "activity_type":
			out.ActivityType = string(in.String())
		case "transaction_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TransactionTime).UnmarshalJSON(data))
			}
		case "type":
			out.Type = string(in.String())
		case "price":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Price).UnmarshalJSON(data))
			}
		case "qty":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Qty).UnmarshalJSON(data))
			}
		case "side":
			out.Side = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "leaves_qty":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LeavesQty).UnmarshalJSON(data))
			}
		case "cum_qty":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CumQty).UnmarshalJSON(data))
			}
		case "date":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Date).UnmarshalText(data))
			}
		case "net_amount":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.NetAmount).UnmarshalJSON(data))
			}
		case "description":
			out.Description = string(in.String())
		case "per_share_amount":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PerShareAmount).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca16(out *jwriter.Writer, in AccountActivity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"activity_type\":"
		out.RawString(prefix)
		out.String(string(in.ActivityType))
	}
	{
		const prefix string = ",\"transaction_time\":"
		out.RawString(prefix)
		out.Raw((in.TransactionTime).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Raw((in.Price).MarshalJSON())
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.Raw((in.Qty).MarshalJSON())
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"leaves_qty\":"
		out.RawString(prefix)
		out.Raw((in.LeavesQty).MarshalJSON())
	}
	{
		const prefix string = ",\"cum_qty\":"
		out.RawString(prefix)
		out.Raw((in.CumQty).MarshalJSON())
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.RawText((in.Date).MarshalText())
	}
	{
		const prefix string = ",\"net_amount\":"
		out.RawString(prefix)
		out.Raw((in.NetAmount).MarshalJSON())
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"per_share_amount\":"
		out.RawString(prefix)
		out.Raw((in.PerShareAmount).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountActivity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountActivity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountActivity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountActivity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca16(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca17(in *jlexer.Lexer, out *Account) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "account_number":
			out.AccountNumber = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "deleted_at":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		case "status":
			out.Status = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		case "cash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Cash).UnmarshalJSON(data))
			}
		case "cash_withdrawable":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CashWithdrawable).UnmarshalJSON(data))
			}
		case "trading_blocked":
			out.TradingBlocked = bool(in.Bool())
		case "transfers_blocked":
			out.TransfersBlocked = bool(in.Bool())
		case "account_blocked":
			out.AccountBlocked = bool(in.Bool())
		case "shorting_enabled":
			out.ShortingEnabled = bool(in.Bool())
		case "buying_power":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BuyingPower).UnmarshalJSON(data))
			}
		case "pattern_day_trader":
			out.PatternDayTrader = bool(in.Bool())
		case "daytrade_count":
			out.DaytradeCount = int64(in.Int64())
		case "daytrading_buying_power":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DaytradingBuyingPower).UnmarshalJSON(data))
			}
		case "regt_buying_power":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RegTBuyingPower).UnmarshalJSON(data))
			}
		case "equity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Equity).UnmarshalJSON(data))
			}
		case "last_equity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastEquity).UnmarshalJSON(data))
			}
		case "multiplier":
			out.Multiplier = string(in.String())
		case "initial_margin":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.InitialMargin).UnmarshalJSON(data))
			}
		case "maintenance_margin":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MaintenanceMargin).UnmarshalJSON(data))
			}
		case "last_maintenance_margin":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastMaintenanceMargin).UnmarshalJSON(data))
			}
		case "long_market_value":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LongMarketValue).UnmarshalJSON(data))
			}
		case "short_market_value":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ShortMarketValue).UnmarshalJSON(data))
			}
		case "portfolio_value":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PortfolioValue).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca17(out *jwriter.Writer, in Account) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"account_number\":"
		out.RawString(prefix)
		out.String(string(in.AccountNumber))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"deleted_at\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"cash\":"
		out.RawString(prefix)
		out.Raw((in.Cash).MarshalJSON())
	}
	{
		const prefix string = ",\"cash_withdrawable\":"
		out.RawString(prefix)
		out.Raw((in.CashWithdrawable).MarshalJSON())
	}
	{
		const prefix string = ",\"trading_blocked\":"
		out.RawString(prefix)
		out.Bool(bool(in.TradingBlocked))
	}
	{
		const prefix string = ",\"transfers_blocked\":"
		out.RawString(prefix)
		out.Bool(bool(in.TransfersBlocked))
	}
	{
		const prefix string = ",\"account_blocked\":"
		out.RawString(prefix)
		out.Bool(bool(in.AccountBlocked))
	}
	{
		const prefix string = ",\"shorting_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShortingEnabled))
	}
	{
		const prefix string = ",\"buying_power\":"
		out.RawString(prefix)
		out.Raw((in.BuyingPower).MarshalJSON())
	}
	{
		const prefix string = ",\"pattern_day_trader\":"
		out.RawString(prefix)
		out.Bool(bool(in.PatternDayTrader))
	}
	{
		const prefix string = ",\"daytrade_count\":"
		out.RawString(prefix)
		out.Int64(int64(in.DaytradeCount))
	}
	{
		const prefix string = ",\"daytrading_buying_power\":"
		out.RawString(prefix)
		out.Raw((in.DaytradingBuyingPower).MarshalJSON())
	}
	{
		const prefix string = ",\"regt_buying_power\":"
		out.RawString(prefix)
		out.Raw((in.RegTBuyingPower).MarshalJSON())
	}
	{
		const prefix string = ",\"equity\":"
		out.RawString(prefix)
		out.Raw((in.Equity).MarshalJSON())
	}
	{
		const prefix string = ",\"last_equity\":"
		out.RawString(prefix)
		out.Raw((in.LastEquity).MarshalJSON())
	}
	{
		const prefix string = ",\"multiplier\":"
		out.RawString(prefix)
		out.String(string(in.Multiplier))
	}
	{
		const prefix string = ",\"initial_margin\":"
		out.RawString(prefix)
		out.Raw((in.InitialMargin).MarshalJSON())
	}
	{
		const prefix string = ",\"maintenance_margin\":"
		out.RawString(prefix)
		out.Raw((in.MaintenanceMargin).MarshalJSON())
	}
	{
		const prefix string = ",\"last_maintenance_margin\":"
		out.RawString(prefix)
		out.Raw((in.LastMaintenanceMargin).MarshalJSON())
	}
	{
		const prefix string = ",\"long_market_value\":"
		out.RawString(prefix)
		out.Raw((in.LongMarketValue).MarshalJSON())
	}
	{
		const prefix string = ",\"short_market_value\":"
		out.RawString(prefix)
		out.Raw((in.ShortMarketValue).MarshalJSON())
	}
	{
		const prefix string = ",\"portfolio_value\":"
		out.RawString(prefix)
		out.Raw((in.PortfolioValue).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Account) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Account) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Account) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Account) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca17(l, v)
}
func easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca18(in *jlexer.Lexer, out *APIError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca18(out *jwriter.Writer, in APIError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca18(l, v)
}
