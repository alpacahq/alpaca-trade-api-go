// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package alpaca

import (
	civil "cloud.google.com/go/civil"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	decimal "github.com/shopspring/decimal"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson24099d24DecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(in *jlexer.Lexer, out *optionContractsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "option_contracts":
			if in.IsNull() {
				in.Skip()
				out.OptionContracts = nil
			} else {
				in.Delim('[')
				if out.OptionContracts == nil {
					if !in.IsDelim(']') {
						out.OptionContracts = make([]OptionContract, 0, 0)
					} else {
						out.OptionContracts = []OptionContract{}
					}
				} else {
					out.OptionContracts = (out.OptionContracts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 OptionContract
					(v1).UnmarshalEasyJSON(in)
					out.OptionContracts = append(out.OptionContracts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "next_page_token":
			if in.IsNull() {
				in.Skip()
				out.NextPageToken = nil
			} else {
				if out.NextPageToken == nil {
					out.NextPageToken = new(string)
				}
				*out.NextPageToken = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24099d24EncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(out *jwriter.Writer, in optionContractsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"option_contracts\":"
		out.RawString(prefix[1:])
		if in.OptionContracts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.OptionContracts {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.NextPageToken != nil {
		const prefix string = ",\"next_page_token\":"
		out.RawString(prefix)
		out.String(string(*in.NextPageToken))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v optionContractsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson24099d24EncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v optionContractsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson24099d24EncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *optionContractsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson24099d24DecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *optionContractsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson24099d24DecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca(l, v)
}
func easyjson24099d24DecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(in *jlexer.Lexer, out *OptionDeliverable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = DeliverableType(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "asset_id":
			if in.IsNull() {
				in.Skip()
				out.AssetID = nil
			} else {
				if out.AssetID == nil {
					out.AssetID = new(string)
				}
				*out.AssetID = string(in.String())
			}
		case "amount":
			out.Amount = string(in.String())
		case "allocation_percentage":
			out.AllocationPercentage = string(in.String())
		case "settlement_method":
			out.SettlementType = DeliverableSettlementType(in.String())
		case "delayed_settlement":
			out.DelayedSettlement = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24099d24EncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(out *jwriter.Writer, in OptionDeliverable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	if in.AssetID != nil {
		const prefix string = ",\"asset_id\":"
		out.RawString(prefix)
		out.String(string(*in.AssetID))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"allocation_percentage\":"
		out.RawString(prefix)
		out.String(string(in.AllocationPercentage))
	}
	{
		const prefix string = ",\"settlement_method\":"
		out.RawString(prefix)
		out.String(string(in.SettlementType))
	}
	{
		const prefix string = ",\"delayed_settlement\":"
		out.RawString(prefix)
		out.Bool(bool(in.DelayedSettlement))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OptionDeliverable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson24099d24EncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OptionDeliverable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson24099d24EncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OptionDeliverable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson24099d24DecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OptionDeliverable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson24099d24DecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca1(l, v)
}
func easyjson24099d24DecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(in *jlexer.Lexer, out *OptionContract) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "tradable":
			out.Tradable = bool(in.Bool())
		case "expiration_date":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ExpirationDate).UnmarshalText(data))
			}
		case "root_symbol":
			if in.IsNull() {
				in.Skip()
				out.RootSymbol = nil
			} else {
				if out.RootSymbol == nil {
					out.RootSymbol = new(string)
				}
				*out.RootSymbol = string(in.String())
			}
		case "underlying_symbol":
			out.UnderlyingSymbol = string(in.String())
		case "underlying_assest_id":
			out.UnderlyingAssetID = string(in.String())
		case "type":
			out.Type = OptionType(in.String())
		case "style":
			out.Style = OptionStyle(in.String())
		case "strike_price":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StrikePrice).UnmarshalJSON(data))
			}
		case "multiplier":
			out.Multiplier = string(in.String())
		case "size":
			out.Size = string(in.String())
		case "open_interest":
			if in.IsNull() {
				in.Skip()
				out.OpenInterest = nil
			} else {
				if out.OpenInterest == nil {
					out.OpenInterest = new(string)
				}
				*out.OpenInterest = string(in.String())
			}
		case "open_interest_date":
			if in.IsNull() {
				in.Skip()
				out.OpenInterestDate = nil
			} else {
				if out.OpenInterestDate == nil {
					out.OpenInterestDate = new(civil.Date)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.OpenInterestDate).UnmarshalText(data))
				}
			}
		case "close_price":
			if in.IsNull() {
				in.Skip()
				out.ClosePrice = nil
			} else {
				if out.ClosePrice == nil {
					out.ClosePrice = new(decimal.Decimal)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ClosePrice).UnmarshalJSON(data))
				}
			}
		case "close_price_date":
			if in.IsNull() {
				in.Skip()
				out.ClosePriceDate = nil
			} else {
				if out.ClosePriceDate == nil {
					out.ClosePriceDate = new(civil.Date)
				}
				if data := in.UnsafeBytes(); in.Ok() {
					in.AddError((*out.ClosePriceDate).UnmarshalText(data))
				}
			}
		case "deliverables":
			if in.IsNull() {
				in.Skip()
				out.Deliverables = nil
			} else {
				in.Delim('[')
				if out.Deliverables == nil {
					if !in.IsDelim(']') {
						out.Deliverables = make([]OptionDeliverable, 0, 0)
					} else {
						out.Deliverables = []OptionDeliverable{}
					}
				} else {
					out.Deliverables = (out.Deliverables)[:0]
				}
				for !in.IsDelim(']') {
					var v4 OptionDeliverable
					(v4).UnmarshalEasyJSON(in)
					out.Deliverables = append(out.Deliverables, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson24099d24EncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(out *jwriter.Writer, in OptionContract) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"tradable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Tradable))
	}
	{
		const prefix string = ",\"expiration_date\":"
		out.RawString(prefix)
		out.RawText((in.ExpirationDate).MarshalText())
	}
	if in.RootSymbol != nil {
		const prefix string = ",\"root_symbol\":"
		out.RawString(prefix)
		out.String(string(*in.RootSymbol))
	}
	{
		const prefix string = ",\"underlying_symbol\":"
		out.RawString(prefix)
		out.String(string(in.UnderlyingSymbol))
	}
	{
		const prefix string = ",\"underlying_assest_id\":"
		out.RawString(prefix)
		out.String(string(in.UnderlyingAssetID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"style\":"
		out.RawString(prefix)
		out.String(string(in.Style))
	}
	{
		const prefix string = ",\"strike_price\":"
		out.RawString(prefix)
		out.Raw((in.StrikePrice).MarshalJSON())
	}
	{
		const prefix string = ",\"multiplier\":"
		out.RawString(prefix)
		out.String(string(in.Multiplier))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.String(string(in.Size))
	}
	{
		const prefix string = ",\"open_interest\":"
		out.RawString(prefix)
		if in.OpenInterest == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OpenInterest))
		}
	}
	if in.OpenInterestDate != nil {
		const prefix string = ",\"open_interest_date\":"
		out.RawString(prefix)
		out.RawText((*in.OpenInterestDate).MarshalText())
	}
	if in.ClosePrice != nil {
		const prefix string = ",\"close_price\":"
		out.RawString(prefix)
		out.Raw((*in.ClosePrice).MarshalJSON())
	}
	if in.ClosePriceDate != nil {
		const prefix string = ",\"close_price_date\":"
		out.RawString(prefix)
		out.RawText((*in.ClosePriceDate).MarshalText())
	}
	if len(in.Deliverables) != 0 {
		const prefix string = ",\"deliverables\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Deliverables {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OptionContract) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson24099d24EncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OptionContract) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson24099d24EncodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OptionContract) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson24099d24DecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OptionContract) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson24099d24DecodeGithubComAlpacahqAlpacaTradeApiGoV3Alpaca2(l, v)
}
